on:
  # schedule: 
  #   - cron: "*/15 * * * *"

  workflow_dispatch:

name: Release

jobs:
  check-commit:
    name: Check commit
    runs-on: ubuntu-latest

    outputs:
      hash: ${{ steps.get-hash.outputs.hash }}
      name: ${{ steps.get-name.outputs.name }}
      changed: ${{ steps.check-change.outputs.cache-hit == 'false' }}

    steps:
      - uses: actions/checkout@v3
        with: 
          repository: 'UpliftGames/wally'
          path: wally
      - name: Get latest commit hash
        id: get-hash
        run: |
          cd wally
          echo "::set-output name=hash::$(git rev-parse --verify HEAD)"
          cd ..
          echo "${{ steps.get-hash.outputs.hash }}" > hash.txt
      - name: Get latest commit name
        id: get-name
        run: |
          cd wally
          
          echo "::set-output name=name::$(git log -1 --format=%s)"
      - name: Check for change
        id: check-change
        uses: actions/cache@v3
        with:
          path: hash.txt
          key: hash

  create-release:
    needs: ["check-commit"]
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-commit.outputs.hash }}
          release_name: ${{ needs.check-commit.outputs.name }}
          draft: true
          prerelease: false

  build:
    needs: ["check-commit", "create-release"]
    strategy:
      fail-fast: false
      matrix:
        # https://doc.rust-lang.org/rustc/platform-support.html
        # Build tier 1
        include:
          - label: 64-bit-linux
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest
          - label: 32-bit-linux
            target: i686-unknown-linux-gnu
            runs-on: ubuntu-latest
          - label: arm64-linux
            target: aarch64-unknown-linux-gnu
            runs-on: ubuntu-latest
          - label: 64-bit-windows
            target: x86_64-pc-windows-msvc
            runs-on: windows-latest
          - label: 32-bit-windows
            target: i686-pc-windows-msvc
            runs-on: windows-latest
          - label: 64-bit-macos
            target: x86_64-apple-darwin
            runs-on: macos-latest

    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: wally
          repository: UpliftGames/wally
          submodules: true

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 14.5

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Build frontend
        run: |
          cd wally/wally-registry-frontend
          npm install
          npm run build
          rm node_modules -r

      - name: Build backend
        run: |
          cd wally/wally-registry-backend
          cargo build --release

      - name: Prepare assets for release archive
        shell: bash
        run: |
          mkdir release

          # Front-end
          cp -r wally/wally-registry-frontend release

          # Back-end
          mkdir release/wally-registry-backend
          cp -r wally/wally-registry-backend/Rocket.toml release/wally-registry-backend/Rocket.toml

          if [ "${{ matrix.runs-on }}" = "windows-latest" ]; then
            cp -r wally/wally-registry-backend/target/wally-registry-backend.exe release/wally-registry-backend/launch.exe
          else
            cp -r wally/wally-registry-backend/target/wally-registry-backend release/wally-registry-backend/launch
          fi

      - name: Create release archive
        shell: bash
        run: |
          cd release

          if [ "${{ matrix.runs-on }}" = "windows-latest" ]; then
            7z a ../release.zip * -r
          else
            zip ../release.zip * -r
          fi
      - name: Prepare asset name
        shell: bash
        run: |
          echo "ASSET_NAME=wally-registry-${{ needs.check-commit.outputs.hash }}-${{ matrix.label }}-${{ matrix.target }}" >> $GITHUB_ENV
      - name: Upload archive to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: release.zip
          asset_name: ${{ env.ASSET_NAME }}.zip
          asset_content_type: application/octet-stream

      - name: Upload archive as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ASSET_NAME }}.zip
          path: release.zip
